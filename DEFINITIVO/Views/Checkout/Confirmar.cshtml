@model Heldu.Logic.ViewModels.UsuarioProductoVM
@using Stripe

<cache enabled="false">
    @{
        ViewData["Title"] = "Confirmar";
        var intentClientSecret = ViewData["ClientSecret"];
        double descuento = Math.Round(((Model.opcion.PrecioInicial - Model.opcion.PrecioFinal) / Model.opcion.PrecioInicial) * 100);
    }
    <link href="~/css/Producto_Detalles.css" rel="stylesheet" type="text/css">


    <h1 class="pb-3" id="checkoutTitle">Resumen y Pago</h1>

    <div class="row">
        <div class="col-6">
            <div class="">
                <div class="titulo-producto-detalles">
                    <h2>@Model.producto.Titulo</h2>
                    <div>
                        <div class="row ubicacion-del-vendedor">
                            <img src="https://image.flaticon.com/icons/svg/684/684908.svg" />
                            <p class="col-7">Fisioimpacto centro estético; Luis Power 23, 48014, Bilbao</p>
                        </div>
                        <div class="row media-de-vendedor" style="align-items: baseline;">
                            <span class="fa fa-star checked"></span>
                            <span class="fa fa-star checked"></span>
                            <span class="fa fa-star checked"></span>
                            <span class="fa fa-star checked"></span>
                            <span class="fa fa-star"></span>
                            <p>(3 opiniones)</p>
                        </div>
                    </div>
                </div>
                <div id="mainImage">
                    <img class="d-block imagenes-carousel" src="~/Productos/GetImage1/@Model.producto.Id" alt="imagen producto">
                </div>
                <div class="precios">
                    <span id="precioInicial">@Model.opcion.PrecioInicial &#8364 </span>
                    <span id="precioFinal">@Model.opcion.PrecioFinal &#8364 </span>
                    <span id="ahorro">Ahorro: @descuento &#37;</span>
                </div>
                <div class="">
                    <p>Opcion Elegida: @(Model.opcion.Id+1)</p>
                    <p id="descripcion-de-producto">@Model.opcion.Descripcion</p>
                </div>
                <div class="fecha-y-visitas">
                    <p id="fecha-validez">Hasta el @Model.producto.FechaValidez</p>
                </div>
            </div>
        </div>
        <div class="col-4 offset-1">
            <h2 id="datosPago">Datos de Pago</h2>

            <form id="payment-form">
                <div class="form-group">
                    <label class="labelPayment" for="card">
                        Tarjeta de débito o crédito
                    </label>
                    <div id="card">
                        <!-- A Stripe Element will be inserted here. -->
                    </div>
                </div>
                <!-- Used to display form errors. -->
                <div id="card-errors" role="alert"></div>
                <div>
                    <p id="pricePayment">Monto a pagar: @Model.opcion.PrecioFinal &#8364 </p>
                </div>
                <div class="form-group">
                    <p class="text-muted small">Heldu no guarda ninguna información de los datos de pago.</p>
                    <div class="div-boton-comprar">
                        <input type="hidden" id="card-button" value="@intentClientSecret" />
                        <button class="btn boton-comprar-producto" type="submit" value="PAGAR" id="botonComprar">PAGAR!</button>
                    </div>
                    <br />
                    <label for="showForm" id="reportarProblema">Reportar un problema</label>
                </div>
            </form>
        </div>
    </div>

    <!-- Formulario oculto para guardar la información de compra exitosa en la BBDD desde un método en CheckoutController -->
    <form asp-controller="Checkout" asp-action="Comprado">
        <input type="hidden" id="productoId" name="productoId" value="@Model.producto.Id"/>
        <input type="hidden" id="vendedorId" name="opcionId" value="@Model.opcion.Id"/>
        <input type="hidden" id="usuarioId" name="usuarioId" value="@Model.usuario.Id"/>
        <button type="submit" id="btnOculto"></button>
    </form>

    <script src="https://js.stripe.com/v3/"></script>
    <script type="text/javascript">

        // Create a Stripe client.
        var stripe = Stripe('pk_test_51GvJEQL9UURBAADxM9FvxSirraromEqgY4QudoU8ppdkFdr5LpvE1vX0OXvPIkvkWExP3zunSNUfB32m88Yeucef00gyM8nROz');

        // Create an instance of Elements.
        var elements = stripe.elements();

        // Custom styling can be passed to options when creating an Element.
        // (Note that this demo uses a wider set of styles than the guide below.)
        var style = {
            base: {
                color: '#32325d',
                fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
                fontSmoothing: 'antialiased',
                fontSize: '16px',
                '::placeholder': {
                    color: '#aab7c4'
                }
            },
            invalid: {
                color: '#fa755a',
                iconColor: '#fa755a'
            }
        };

        // Create an instance of the card Element.
        var card = elements.create('card', { style: style });

        // Add an instance of the card Element into the `card-element` <div>
        card.mount('#card');

        //Get the ClientSecret from the VewData (comingo from PaymentIntent in Server-side)
        var clientSecret = document.getElementById('card-button').value;
        console.log(clientSecret);

        // Handle real-time validation errors from the card Element.
        card.on('change', ({ error }) => {
            const displayError = document.getElementById('card-errors');
            if (error) {
                displayError.textContent = error.message;
            } else {
                displayError.textContent = '';
            }
        });

        // Handle form submission.
        var form = document.getElementById('payment-form');
        var boton = document.getElementById('botonComprar');

        form.addEventListener('submit', function (event) {
            console.log("Click en Pagar");
            event.preventDefault();
            boton.disabled = true;
            boton.innerText = 'Procesando';

            stripe.confirmCardPayment(clientSecret, {
                payment_method: {
                    card: card,
                    billing_details: {
                        name: 'Monte Pagasarri'
                    }
                }
            }).then(function (result) {
                if (result.error) {
                    /* Show error to your customer (e.g., insufficient funds)*/
                    console.log(result.error.message);
                    console.log("Error se debería mostrar acá");
                    boton.disabled = false;
                    boton.innerText = 'Pagar';
                } else {
                    /* The payment has been processed!*/
                    if (result.paymentIntent.status === 'succeeded') {
                        console.log("Pago Exitoso!!!");
                        window.alert('Pago exitoso! Redirigiendo...');
                        document.getElementById('btnOculto').click();
                        // Show a success message to your customer
                        // There's a risk of the customer closing the window before callback
                        // execution. Set up a webhook or plugin to listen for the
                        // payment_intent.succeeded event that handles any business critical
                        // post-payment actions.
                    }
                }
            });
        });


    </script>



</cache>